@model Young.Web.Models.Column.ColumnModel

@Html.HiddenFor(model => model.IsNew)
@Html.HiddenFor(model => model.TableCode)
@Html.HiddenFor(model => model.TableName)
<div class="editor-label w150 txt-right">数据类型</div>
<div class="editor-field join200">@Html.DropDownListFor(f => f.ColumnType, Model.ColumnTypeList, new { onchange = "changeType()" })</div>
<script type="text/javascript">
    function changeType() {
        var val = $('#ColumnType').val();
        $.messager.confirm('确认', '改变类型后将丢失未保存的变改，你确定要更换吗?', function (r) {
            if (r) {
                // exit action;
                location.href = "addColumn?tcode=@(Model.TableCode)&type=" + val;
            }
        });
    }
</script>
<div class="editor-label w150 txt-right">
    @Html.LabelFor(model => model.DatabaseType)
</div>
<div class="editor-field">
    @Html.DropDownListFor(model => model.DatabaseType, Model.DatabaseTypeList)
    @Html.ValidationMessageFor(model => model.DatabaseType)
</div>


<div class="editor-label w150 txt-right">
    @Html.LabelFor(model => model.Code)
</div>
<div class="editor-field join200">
    @if (Model.IsNew)
    {
        @Html.EditorFor(model => model.Code)
        @Html.ValidationMessageFor(model => model.Code)    
    }
    else
    {
        @Html.DisplayFor(model => model.Code)
    }

</div>

<div class="editor-label w150 txt-right">
    @Html.LabelFor(model => model.Name)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.Name)
    @Html.ValidationMessageFor(model => model.Name)
</div>

<div class="editor-label w150 txt-right">
    @Html.LabelFor(model => model.Description)
</div>
<div class="editor-field" style="float: left;">
    @Html.TextAreaFor(model => model.Description, new { style = "height: 150px; width:560px;" })
</div>
<script type="text/javascript">
    $(function () {
        var um = UM.getEditor('Description', {
            toolbar: [
            'source | bold italic underline strikethrough |  forecolor backcolor | removeformat |',
            'insertorderedlist insertunorderedlist  | fontfamily fontsize',
            '| justifyleft justifycenter justifyright justifyjustify'
            ]
        });
    });
</script>
<div style="clear: both;"></div>
<div class="editor-label w150 txt-right">
    @Html.LabelFor(model => model.IsRequired)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.IsRequired)
    @Html.ValidationMessageFor(model => model.IsRequired)
</div>

<div class="editor-label w150 txt-right">
    @Html.LabelFor(model => model.IsNeedCustomValidation)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.IsNeedCustomValidation)
    @Html.ValidationMessageFor(model => model.IsNeedCustomValidation)
</div>

<div class="editor-label w150 txt-right">
    @Html.LabelFor(model => model.CustomValidationRegularExpression)
</div>
<div class="editor-field join200">
    @Html.EditorFor(model => model.CustomValidationRegularExpression)
    @Html.ValidationMessageFor(model => model.CustomValidationRegularExpression)
</div>

<div class="editor-label w150 txt-right">
    @Html.LabelFor(model => model.CustomValidationErrorMessage)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.CustomValidationErrorMessage)
    @Html.ValidationMessageFor(model => model.CustomValidationErrorMessage)
</div>




